/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EncryptEvaluationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMyRecord"
      | "getUserCid"
      | "getUserRecord"
      | "grantAccess"
      | "isAvgScoreAtLeast"
      | "isEligible"
      | "owner"
      | "pendingRewards"
      | "protocolFees"
      | "protocolId"
      | "queryFeeWei"
      | "queryScoreStats"
      | "setQueryFeeWei"
      | "upload"
      | "usersCount"
      | "withdrawProtocolFees"
      | "withdrawRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CidUpdated"
      | "QueryFeeUpdated"
      | "RecordUploaded"
      | "RewardsAdded"
      | "RewardsWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getMyRecord",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecord",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvgScoreAtLeast",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryFeeWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryScoreStats",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueryFeeWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upload",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "usersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getMyRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserCid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvgScoreAtLeast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryFeeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryScoreStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueryFeeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upload", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usersCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
}

export namespace CidUpdatedEvent {
  export type InputTuple = [user: AddressLike, cid: string];
  export type OutputTuple = [user: string, cid: string];
  export interface OutputObject {
    user: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QueryFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordUploadedEvent {
  export type InputTuple = [user: AddressLike, cid: string];
  export type OutputTuple = [user: string, cid: string];
  export interface OutputObject {
    user: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsAddedEvent {
  export type InputTuple = [
    total: BigNumberish,
    perUser: BigNumberish,
    usersCount: BigNumberish
  ];
  export type OutputTuple = [
    total: bigint,
    perUser: bigint,
    usersCount: bigint
  ];
  export interface OutputObject {
    total: bigint;
    perUser: bigint;
    usersCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsWithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EncryptEvaluation extends BaseContract {
  connect(runner?: ContractRunner | null): EncryptEvaluation;
  waitForDeployment(): Promise<this>;

  interface: EncryptEvaluationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMyRecord: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        score: string;
        contribution: string;
        grade: string;
        passed: string;
      }
    ],
    "view"
  >;

  getUserCid: TypedContractMethod<[user: AddressLike], [string], "view">;

  getUserRecord: TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, string, string] & {
        score: string;
        contribution: string;
        grade: string;
        passed: string;
      }
    ],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  isAvgScoreAtLeast: TypedContractMethod<
    [thresholdEnc: BytesLike, inputProof: BytesLike],
    [string],
    "nonpayable"
  >;

  isEligible: TypedContractMethod<
    [
      scoreThresholdEnc: BytesLike,
      contributionThresholdEnc: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  protocolFees: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  queryFeeWei: TypedContractMethod<[], [bigint], "view">;

  queryScoreStats: TypedContractMethod<
    [thresholdEnc: BytesLike, inputProof: BytesLike],
    [[string, string] & { matchedCount: string; sumScore: string }],
    "payable"
  >;

  setQueryFeeWei: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  upload: TypedContractMethod<
    [
      scoreEnc: BytesLike,
      contributionEnc: BytesLike,
      gradeEnc: BytesLike,
      passedEnc: BytesLike,
      inputProof: BytesLike,
      cid: string
    ],
    [void],
    "nonpayable"
  >;

  usersCount: TypedContractMethod<[], [bigint], "view">;

  withdrawProtocolFees: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawRewards: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMyRecord"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        score: string;
        contribution: string;
        grade: string;
        passed: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCid"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserRecord"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, string, string] & {
        score: string;
        contribution: string;
        grade: string;
        passed: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<[grantee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAvgScoreAtLeast"
  ): TypedContractMethod<
    [thresholdEnc: BytesLike, inputProof: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isEligible"
  ): TypedContractMethod<
    [
      scoreThresholdEnc: BytesLike,
      contributionThresholdEnc: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "queryFeeWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "queryScoreStats"
  ): TypedContractMethod<
    [thresholdEnc: BytesLike, inputProof: BytesLike],
    [[string, string] & { matchedCount: string; sumScore: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setQueryFeeWei"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upload"
  ): TypedContractMethod<
    [
      scoreEnc: BytesLike,
      contributionEnc: BytesLike,
      gradeEnc: BytesLike,
      passedEnc: BytesLike,
      inputProof: BytesLike,
      cid: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawProtocolFees"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CidUpdated"
  ): TypedContractEvent<
    CidUpdatedEvent.InputTuple,
    CidUpdatedEvent.OutputTuple,
    CidUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "QueryFeeUpdated"
  ): TypedContractEvent<
    QueryFeeUpdatedEvent.InputTuple,
    QueryFeeUpdatedEvent.OutputTuple,
    QueryFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecordUploaded"
  ): TypedContractEvent<
    RecordUploadedEvent.InputTuple,
    RecordUploadedEvent.OutputTuple,
    RecordUploadedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsAdded"
  ): TypedContractEvent<
    RewardsAddedEvent.InputTuple,
    RewardsAddedEvent.OutputTuple,
    RewardsAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsWithdrawn"
  ): TypedContractEvent<
    RewardsWithdrawnEvent.InputTuple,
    RewardsWithdrawnEvent.OutputTuple,
    RewardsWithdrawnEvent.OutputObject
  >;

  filters: {
    "CidUpdated(address,string)": TypedContractEvent<
      CidUpdatedEvent.InputTuple,
      CidUpdatedEvent.OutputTuple,
      CidUpdatedEvent.OutputObject
    >;
    CidUpdated: TypedContractEvent<
      CidUpdatedEvent.InputTuple,
      CidUpdatedEvent.OutputTuple,
      CidUpdatedEvent.OutputObject
    >;

    "QueryFeeUpdated(uint256)": TypedContractEvent<
      QueryFeeUpdatedEvent.InputTuple,
      QueryFeeUpdatedEvent.OutputTuple,
      QueryFeeUpdatedEvent.OutputObject
    >;
    QueryFeeUpdated: TypedContractEvent<
      QueryFeeUpdatedEvent.InputTuple,
      QueryFeeUpdatedEvent.OutputTuple,
      QueryFeeUpdatedEvent.OutputObject
    >;

    "RecordUploaded(address,string)": TypedContractEvent<
      RecordUploadedEvent.InputTuple,
      RecordUploadedEvent.OutputTuple,
      RecordUploadedEvent.OutputObject
    >;
    RecordUploaded: TypedContractEvent<
      RecordUploadedEvent.InputTuple,
      RecordUploadedEvent.OutputTuple,
      RecordUploadedEvent.OutputObject
    >;

    "RewardsAdded(uint256,uint256,uint256)": TypedContractEvent<
      RewardsAddedEvent.InputTuple,
      RewardsAddedEvent.OutputTuple,
      RewardsAddedEvent.OutputObject
    >;
    RewardsAdded: TypedContractEvent<
      RewardsAddedEvent.InputTuple,
      RewardsAddedEvent.OutputTuple,
      RewardsAddedEvent.OutputObject
    >;

    "RewardsWithdrawn(address,uint256)": TypedContractEvent<
      RewardsWithdrawnEvent.InputTuple,
      RewardsWithdrawnEvent.OutputTuple,
      RewardsWithdrawnEvent.OutputObject
    >;
    RewardsWithdrawn: TypedContractEvent<
      RewardsWithdrawnEvent.InputTuple,
      RewardsWithdrawnEvent.OutputTuple,
      RewardsWithdrawnEvent.OutputObject
    >;
  };
}
